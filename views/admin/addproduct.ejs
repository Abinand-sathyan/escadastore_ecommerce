<%- include('partials/adminheader.ejs') %>
<div class="col-12 grid-margin stretch-card">
    <div class="card">
      <div class="card-body">
        <h4 class="card-title">Add product</h4>
        <!-- <p class="card-description">Add product</p> -->
        <form class="forms-sample" style="margin-top: 5rem;" action="/admin/postproductdata" method="post" enctype="multipart/form-data">
          <% if(addPROerr.length>0){ %> 
            <div class=" alert alert-danger col-md-12 text-center "style="color: white;background-color: rgb(221, 118, 118);" role="alert">
              <p class="text-danger"><%=addPROerr %> </p>
            </div>
              <% } %> 
          <div class="form-group">
            <label for="exampleInputName1">Product Name</label>
            <input type="text" class="form-control" id="exampleInputName1" placeholder="Product Name" name="ProductName">
          </div>
          <div class="form-group">
            <label for="exampleInputName1">Quantity</label>
            <input type="number" class="form-control" id="exampleInputName1" placeholder="quantity" name="quantity">
          </div>
          <div class="form-group">
            <label for="exampleInputName1">Discription</label>
            <input type="text" class="form-control" id="exampleInputName1" placeholder="Discription" name="Discription">
          </div>
          <div class="form-group">
            <label for="exampleInputCity1">Prize</label>
            <input type="number" class="form-control" id="exampleInputCity1" placeholder="Prize"  name="Prize">
          </div>
          <div class="form-group">
            <label for="exampleInputCity1">offer</label>
            <input type="number" class="form-control" id="exampleInputCity1" placeholder="offer"  name="offer">
          </div>
          <!-- <div class="form-group">
            <label for="exampleInputCity1">Discount prize</label>
            <input type="number" class="form-control" id="exampleInputCity1" placeholder="discountPrice"  name="discountPrice">
          </div> -->
          <div class="form-group">
            <label for="exampleSelectGender">Size</label>
            <select class="form-control" id="exampleSelectGender" name="Size">
              <option>Small</option>
              <option>Medium</option>
              <option>Large</option>
              <option>XL</option>
              <option>xxl</option>
              </select>
          </div>
          <div class="form-group">
            <label for="exampleSelectGender">color</label>
            <select class="form-control" id="exampleSelectGender" name="Color">
             <option>Red</option>
              <option>Blue</option>
              <option>black</option>
              <option>white</option>
              </select>
          </div>
         <div class="form-group">
            <label for="exampleSelectGender">category</label>
            <select class="form-control" id="exampleSelectGender" name="Category">
              <% for( let i = 0; i < categoryname.length; i++ ) { %>
              <option><%- categoryname[i].CategoryName %></option>
              <% } %>
            </select>
          </div>
          <div class="form-group" style="margin-top: 2rem;" >
            <label for="formFileSm" class="form-label">image</label>
            <input class="form-control form-control-sm" id="id_image"  type="file" name="ImageURL"  multiple/>
         
          </div>
          <div id="image-box" class="image-container h-50 w-50"></div>
          <button
            class="btn btn-outline-info"
            id="crop-btn"
            style="width: 100%; margin-top: 10px; display: none; background-color: #0090e7;
            color: white;"
            type="button"
          >
            Crop
          </button>
          
          <div class="form-group" style="margin-top: 2rem;" >
            <label for="formFileSm" class="form-label">image</label>
            <input class="form-control form-control-sm" id="id_image1"  type="file" name="ImageURL" style="height: 3rem;" multiple/>
          </div>

          <div id="image-box1" class="image-container h-50 w-50"></div>
          <button
            class="btn btn-outline-info"
            id="crop-btn1"
            style="width: 100%; margin-top: 10px; display: none; background-color: #0090e7;
            color: white;"
            type="button"
          >
            Crop
          </button>

          <div class="form-group" style="margin-top: 2rem;" >
            <label for="formFileSm" class="form-label">image</label>
            <input class="form-control form-control-sm" id="id_image2" type="file" name="ImageURL" style="height: 3rem;" multiple/>
          </div>

          <div id="image-box2" class="image-container h-50 w-50"></div>
          <button
            class="btn btn-outline-info"
            id="crop-btn2"
            style="width: 100%; margin-top: 10px; display: none; background-color: #0090e7;
            color: white;"
            type="button"
          >
            Crop
          </button>

          <div class="form-group" style="margin-top: 2rem;" >
            <label for="formFileSm" class="form-label">image</label>
            <input class="form-control form-control-sm" id="formFileSm"  type="file" name="ImageURL" style="height: 3rem;" multiple/>
          </div>
          <button type="submit" id="confirm-btn" class="btn btn-primary mr-2">Submit</button>
          <button class="btn btn-dark">Cancel</button>
        </form>
      </div>
    </div>
  </div>



 <!-- imagr script 1 -->
  <script>


    // image-box is the id of the div element that will store our cropping image preview
    const imagebox = document.getElementById("image-box");
    // crop-btn is the id of button that will trigger the event of change original file with cropped file.
    const crop_btn = document.getElementById("crop-btn");
    // id_image is the id of the input tag where we will upload the image
    const input = document.getElementById("id_image");
  
    // When user uploads the image this event will get triggered
    input.addEventListener("change", () => {
      // Getting image file object from the input variable
      const img_data = input.files[0];
      // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
      // The new object URL represents the specified File object or Blob object.
      const url = URL.createObjectURL(img_data);
  
      // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
      imagebox.innerHTML = `<img src="${url}" id="image" style="width:70%;">`;
  
      // Storing that cropping view image in a variable
      const image = document.getElementById("image");
  
      // Displaying the image box
      document.getElementById("image-box").style.display = "block";
      // Displaying the Crop buttton
      document.getElementById("crop-btn").style.display = "block";
      // Hiding the Post button
      document.getElementById("confirm-btn").style.display = "none";
  
      // Creating a croper object with the cropping view image
      // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
      // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
      const cropper = new Cropper(image, {
        autoCropArea: 1,
        viewMode: 1,
        scalable: false,
        zoomable: false,
        movable: false,
        minCropBoxWidth: 200,
        minCropBoxHeight: 200,
      });
  
      // When crop button is clicked this event will get triggered
      crop_btn.addEventListener("click", () => {
        // This method coverts the selected cropped image on the cropper canvas into a blob object
        cropper.getCroppedCanvas().toBlob((blob) => {
          // Gets the original image data
          let fileInputElement = document.getElementById("id_image");
          // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
          let file = new File([blob], img_data.name, {
            type: "image/",
            lastModified: new Date().getTime(),
          });
          // Create a new container
          let container = new DataTransfer();
          // Add the cropped image file to the container
          container.items.add(file);
          // Replace the original image file with the new cropped image file
          fileInputElement.files = container.files;
  
          // Hide the cropper box
          document.getElementById("image-box").style.display = "none";
          // Hide the crop button
          document.getElementById("crop-btn").style.display = "none";
          // Display the Post button
          document.getElementById("confirm-btn").style.display = "block";
        });
      });
    });
  </script>

  <!-- imagr script 2 -->

  <script>


    // image-box is the id of the div element that will store our cropping image preview
    const imagebox1 = document.getElementById("image-box1");
    // crop-btn is the id of button that will trigger the event of change original file with cropped file.
    const crop_btn1 = document.getElementById("crop-btn1");
    // id_image is the id of the input tag where we will upload the image
    const input1 = document.getElementById("id_image1");
  
    // When user uploads the image this event will get triggered
    input1.addEventListener("change", () => {
      // Getting image file object from the input variable
      const img_data = input1.files[0];
      // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
      // The new object URL represents the specified File object or Blob object.
      const url = URL.createObjectURL(img_data);
  
      // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
      imagebox1.innerHTML = `<img src="${url}" id="image" style="width:70%;">`;
  
      // Storing that cropping view image in a variable
      const image = document.getElementById("image");
  
      // Displaying the image box
      document.getElementById("image-box1").style.display = "block";
      // Displaying the Crop buttton
      document.getElementById("crop-btn1").style.display = "block";
      // Hiding the Post button
      document.getElementById("confirm-btn").style.display = "none";
  
      // Creating a croper object with the cropping view image
      // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
      // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
      const cropper = new Cropper(image, {
        autoCropArea: 1,
        viewMode: 1,
        scalable: false,
        zoomable: false,
        movable: false,
        minCropBoxWidth: 200,
        minCropBoxHeight: 200,
      });
  
      // When crop button is clicked this event will get triggered
      crop_btn1.addEventListener("click", () => {
        // This method coverts the selected cropped image on the cropper canvas into a blob object
        cropper.getCroppedCanvas().toBlob((blob) => {
          // Gets the original image data
          let fileInputElement = document.getElementById("id_image1");
          // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
          let file = new File([blob], img_data.name, {
            type: "image/",
            lastModified: new Date().getTime(),
          });
          // Create a new container
          let container = new DataTransfer();
          // Add the cropped image file to the container
          container.items.add(file);
          // Replace the original image file with the new cropped image file
          fileInputElement.files = container.files;
  
          // Hide the cropper box
          document.getElementById("image-box1").style.display = "none";
          // Hide the crop button
          document.getElementById("crop-btn1").style.display = "none";
          // Display the Post button
          document.getElementById("confirm-btn").style.display = "block";
        });
      });
    });
  </script>

  <!-- imagr script 3 -->


  <script>


    // image-box is the id of the div element that will store our cropping image preview
    const imagebox2= document.getElementById("image-box2");
    // crop-btn is the id of button that will trigger the event of change original file with cropped file.
    const crop_btn2 = document.getElementById("crop-btn2");
    // id_image is the id of the input tag where we will upload the image
    const input2 = document.getElementById("id_image2");
  
    // When user uploads the image this event will get triggered
    input2.addEventListener("change", () => {
      // Getting image file object from the input variable
      const img_data2 = input2.files[0];
      // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
      // The new object URL represents the specified File object or Blob object.
      const url = URL.createObjectURL(img_data2);
  
      // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
      imagebox2.innerHTML = `<img src="${url}" id="image" style="width:70%;">`;
  
      // Storing that cropping view image in a variable
      const image = document.getElementById("image");
  
      // Displaying the image box
      document.getElementById("image-box2").style.display = "block";
      // Displaying the Crop buttton
      document.getElementById("crop-btn2").style.display = "block";
      // Hiding the Post button
      document.getElementById("confirm-btn").style.display = "none";
  
      // Creating a croper object with the cropping view image
      // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
      // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
      const cropper = new Cropper(image, {
        autoCropArea: 1,
        viewMode: 1,
        scalable: false,
        zoomable: false,
        movable: false,
        minCropBoxWidth: 200,
        minCropBoxHeight: 200,
      });
  
      // When crop button is clicked this event will get triggered
      crop_btn2.addEventListener("click", () => {
        // This method coverts the selected cropped image on the cropper canvas into a blob object
        cropper.getCroppedCanvas().toBlob((blob) => {
          // Gets the original image data
          let fileInputElement = document.getElementById("id_image2");
          // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
          let file = new File([blob], img_data2.name, {
            type: "image/",
            lastModified: new Date().getTime(),
          });
          // Create a new container
          let container = new DataTransfer();
          // Add the cropped image file to the container
          container.items.add(file);
          // Replace the original image file with the new cropped image file
          fileInputElement.files = container.files;
  
          // Hide the cropper box
          document.getElementById("image-box2").style.display = "none";
          // Hide the crop button
          document.getElementById("crop-btn2").style.display = "none";
          // Display the Post button
          document.getElementById("confirm-btn").style.display = "block";
        });
      });
    });
  </script>


<%- include('partials/adminfooter.ejs') %>